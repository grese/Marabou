on:
  release:
    types: [created]

name: Release

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [g++]
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        shell: bash
        run: |
          echo "Running install dependences for $RUNNER_OS"
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "installing linux packages"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "installing windows packages"
          elif [ "$RUNNER_OS" == "MacOS" ]; then
            echo "installing macos packages"
          fi
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user --upgrade setuptools
          python3 -m pip install --user wheel
          python3 -m pip install --user -r maraboupy/test_requirements.txt --cache-dir $HOME/.pip-cache

      - name: Create Build Environment
        shell: bash
        run: cmake -E make_directory build

      - name: Configure CMake
        shell: bash
        working-directory: build
        run: |
          cmake -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DBUILD_STATIC_MARABOU=ON \
            -DBUILD_PYTHON=ON \
            $([ "$RUNNER_OS" == "Windows" ] && echo "-DPYTHON_EXECUTABLE=$(which $PY_CMD) -G'Visual Studio 15 2017 Win64'" || echo "")

      - name: Build
        shell: bash
        run: make -j2
        working-directory: build
        
      - name: Run system tests
        shell: bash
        run: ctest -L system -j 2 
        working-directory: build
 
      - name: Run regression tests
        shell: bash
        run: ctest -L regress[0-1] -j 2 
        working-directory: build

      - name: Python Bindings Install Check
        shell: bash
        run: |
          export PYTHONPATH="$PYTHONPATH:$(dirname $(find $GITHUB_WORKSPACE -name "maraboupy" -type d))"
          python3 -c "import maraboupy"
      
  #     - name: Binary Packaging
  #       id: packaging
  #       shell: bash
  #       run: |
  #         BINARY_OS=$(echo $RUNNER_OS | tr '[[:upper:]]' '[[:lower:]]')
  #         BINARY_EXTENSION=$([ "$BINARY_OS" == "windows" ] && echo ".exe" || echo "")
  #         ASSETNAME="marabou-$BINARY_OS.zip"
  #         mkdir -p dist
  #         cp "./build/Marabou$BINARY_EXTENSION" ./dist
  #         if [ "$RUNNER_OS" == "Windows" ]; then
  #           powershell.exe -exec bypass -c "Compress-Archive . ../$ASSETNAME"
  #         else
  #           zip -r "../$ASSETNAME" .
  #         fi
  #         cd -
  #         echo "::set-output name=release_os::./$BINARY_OS"
  #         echo "::set-output name=release_assetname::$ASSETNAME"
  #         echo "::set-output name=release_assetpath::./$ASSETNAME"
      
  #     - name: Fetch Release Info
  #       id: release_info
  #       shell: bash
  #       env:
  #         ASSETNAME: ${{ steps.packaging.outputs.release_assetname }}
  #       run: |
  #         RELEASE_ID="$(python3 ./tools/release_id.py -o grese -r Marabou -a $ASSETNAME | grep 'release_id:' | cut -d ':' -f 2)"
  #         RELEASE_UPLOAD_URL="https://uploads.github.com/repos/grese/Marabou/releases/$RELEASE_ID/assets?name=$ASSETNAME"
  #         echo "$RELEASE_UPLOAD_URL"
  #         echo "::set-output name=release_id::$RELEASE_ID"
  #         echo "::set-output name=release_upload_url::$RELEASE_UPLOAD_URL"
      
  #     - name: Upload Release Asset
  #       id: release_assets
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.release_info.outputs.release_upload_url }}
  #         asset_path: ${{ steps.packaging.outputs.release_assetpath }}
  #         asset_name: ${{ steps.packaging.outputs.release_assetname }}
  #         asset_content_type: application/zip

  # publish:
  #   - name: Publish package to TestPyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         verbose: true
  #         packages_dir: ./maraboupy/
  #         user: __token__
  #         password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/

  # RELEASE BUILD:
  # - name: Publish pip package to PyPI
  #   uses: pypa/gh-action-pypi-publish@release/v1
  #   with:
  #     verbose: true
  #     user: __token__
  #     password: ${{ secrets.PYPI_API_TOKEN }}
  #     packages_dir: ./maraboupy/
